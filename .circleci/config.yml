version: 2.1

jobs:
  build-frontend:
    docker:
      - image: cimg/node@sha256:${NODE_HASH}
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: build .env file
          command: |
            cd frontend
            touch .env
            echo 'VITE_APP_BACKEND_URL="https://${DOMAIN}/api/email/"' >.env
      - run:
          name: build dist folder
          command: |
            cd frontend
            npm i
            npm run build -- --mode production
      - persist_to_workspace:
          root: frontend
          paths:
            - dist

  build-backend:
    machine:
      image: ubuntu-2204:2022.07.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Build and tag wg-vpn image
          command: |
            cd ~/repo/backend
            docker build -t website-backend:latest .
      - run:
          name: export backend image to tar
          command: |
            cd ~/repo/backend
            mkdir -p .builds
            cd .builds/
            docker save -o website-backend.tar website-backend
      - persist_to_workspace:
          root: backend
          paths:
            - .builds
            - postman
            - quickstart

  test-backend:
    machine:
      image: ubuntu-2204:2022.07.1
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo/backend
      - run:
          name: load build image
          command: |
            cd ~/repo/backend/.builds/
            docker load <website-backend.tar
      - run:
          name: bring up backend
          command: |
            cd ~/repo/backend/quickstart/
            docker-compose up -d
      - run: |
          nvm install v18
      - run:
          name: Install Newman Using NPM
          command: |
            npm install -g newman
            npm install -g newman-reporter-htmlextra
      - run: newman run -h
      - run:
          name: Running postman tests
          command: |
            sleep 4
            mkdir -p ~/repo/results/junit
            sed -i '1s/^/\xef\xbb\xbf/' \
              ~/repo/backend/postman/backend-tests.json
            newman run -k ~/repo/backend/postman/backend-tests.json \
              -r cli,htmlextra,junit \
              --working-dir ~/repo/backend/postman \
              --reporter-htmlextra-export ~/repo/results \
              --reporter-htmlextra-browserTitle "Backend Test Dashboard" \
              --reporter-htmlextra-title "Backend Test Dashboard" \
              --reporter-junit-export ~/repo/results/junit/results.xml \
              --insecure
      - store_artifacts:
          path: ~/repo/results
          destination: integration-test-results
      - store_test_results:
          path: ~/repo/results/junit
      - run:
          name: Generate wireguard swagger file
          command: |
            curl localhost:8000/openapi.json \
              > ~/repo/results/backend-swagger.json
      - store_artifacts:
          path: ~/repo/results/backend-swagger.json
          destination: backend-swagger.json

  deploy-backend:
    machine:
      image: ubuntu-2204:2022.07.1
    working_directory: ~/repo
    steps:
      - run: sudo apt -y install software-properties-common
      - run: sudo apt-add-repository ppa:ansible/ansible -y
      - run: sudo apt-get -y update
      - run: sudo apt-get install -y git curl ansible sshpass
      - checkout
      - attach_workspace:
          at: ~/repo/backend
      - add_ssh_keys:
          fingerprints:
            - "ec:8f:0e:d6:7f:78:32:a6:a6:bd:78:5b:10:f5:3a:f1"
      - run: ssh-keyscan -H jackdekock.com >> ~/.ssh/known_hosts
      - run: rsync -r -t -p -v --progress -e 'ssh -i ~/.ssh/id_rsa' -s backend/.builds/website-backend.tar ${SSH_USER}@${SERVER_IP}:/tmp/website-backend.tar
      - run:
          name: Create inventory file
          command: |
            cd ansible
            touch inventory.ini
            echo "[remote_server]" >inventory.ini
            echo ${SERVER_IP} >>inventory.ini
      - run:
          name: Deploy to host server(s)
          command: |
            cd ansible
            ansible-galaxy collection install community.docker
            ansible-playbook deploy-backend.yml -i inventory.ini -u vagrant

  ansible-lint:
    docker:
      - image: python@sha256:${PYTHON_IMAGE_SHA}
    resource_class: small
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Environment.CACHE_FLAG }}
      - run:
          name: Install ansible and ansible-lint
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install ansible ansible-lint
      - save_cache:
          key: deps1-{{ .Environment.CACHE_FLAG }}
          paths:
            - ".venv"
      - run:
          name: Lint playbook with ansible lint
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            ansible-lint --version
            cd ~/repo/ansible/
            ansible-lint

  checkov:
    docker:
      - image: python@sha256:${PYTHON_IMAGE_SHA}
    resource_class: small
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: checkov
      - run:
          name: Install Checkov
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install checkov
      - save_cache:
          key: checkov
          paths:
            - ".venv"
      - run:
          name: Run Checkov against repo
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            cd ~/repo/
            checkov -d .

  git-leaks:
    machine:
      image: ubuntu-2204:2022.07.1
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Scan for gitLeaks
          command: |
            docker run -v ~/repo:/path zricethezav/gitleaks:latest detect --source="/path" -v

  deploy-frontend:
    machine:
      image: ubuntu-2204:2022.07.1
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo/frontend
      - run: rsync -r -t -p -v --progress -e 'ssh -i ~/.ssh/id_rsa' -s frontend/dist/ ${SSH_USER}@${SERVER_IP}:/usr/share/nginx/html

workflows:
  version: 2

  # Workflow for running tests on untagged builds
  continuous_integration:
    jobs:
      - git-leaks
      - ansible-lint
      - build-backend
      - checkov
      - test-backend:
          requires:
            - build-backend

  # Workflow for handling deployment on tagged builds
  continuous_delivery:
    jobs:
      - build-frontend
      - build-backend
      - deploy-frontend:
          requires:
            - build-frontend
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/  # Only deploy on tags like vX.X.X (semantic versioning)
      - deploy-backend:
          requires:
            - build-backend
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/  # Only deploy on tags like vX.X.X (semantic versioning)
